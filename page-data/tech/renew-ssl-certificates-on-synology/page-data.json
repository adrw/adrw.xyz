{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/tech/renew-ssl-certificates-on-synology","result":{"data":{"post":{"__typename":"MdxPost","slug":"/tech/renew-ssl-certificates-on-synology","title":"Renew SSL Certificates on Synology","date":"2021-04-09","tags":[{"name":"Tech","slug":"tech"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Renew SSL Certificates on Synology\",\n  \"date\": \"2021-04-09T00:00:00.000Z\",\n  \"slug\": \"tech/renew-ssl-certificates-on-synology\",\n  \"tags\": [\"Tech\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Turns out an optimization in my router configuration to auto-upgrade HTTP requests to HTTPS became a head scratcher when the built in Synology Certificate Manager wouldn't renew a certificate for my home server services.\"), mdx(\"p\", null, \"I had setup a redirect such that all traffic on port 80 (HTTP) to my router forwards to my home server port 4080 where my home server can reverse proxy to different services running in Docker containers on different ports. Thus, the Certificate Manager, which relies on access to port 80 and port 443, would fail since all of the requests to port 80 would end up going through my redirect to port 4080 and the reverse proxy rule which upgrades it to https.\"), mdx(\"p\", null, \"Temporarily updating my router rule to forward requests on port 80 to Synology as port 80 allowed the Certificate Manager to succeed.\"), mdx(\"p\", null, \"What revealed this to me was when I tried to renew the certificate manually using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"certbot\"), \" and then \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dehydrated-io/dehydrated/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"dehydrated\")), \" and realized that when I ran \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dehydrated\"), \" on the Synology server, the logs showed that ACME verification over port 443 succeeded but over port 80 failed.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Turns out an optimization in my router configuration to auto-upgrade HTTP requests to HTTPS became a head scratcher when the built inâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/tech/renew-ssl-certificates-on-synology","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}